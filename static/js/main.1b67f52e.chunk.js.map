{"version":3,"sources":["component/Icon.jsx","component/MyMap.jsx","component/MapControl.jsx","component/MapCirclegeo.jsx","component/MapGeoJson.jsx","App.js","reportWebVitals.js","index.js"],"names":["iconMarker","L","Icon","iconUrl","customMarker","iconRetinaUrl","iconAnchor","popupAnchor","shadowUrl","shadowSize","shadowAnchor","iconSize","Point","MyMap","className","Map","center","zoom","scrollWheelZoom","style","height","TileLayer","attribution","url","Marker","icon","position","Popup","Tooltip","direction","Rectangle","bounds","color","sticky","MapControl","DraggableMarker","useState","draggable","setDraggable","setPosition","markerRef","useRef","eventHandlers","useMemo","dragend","marker","current","getLatLng","toggleDraggable","useCallback","d","ref","minWidth","onClick","LayersControl","BaseLayer","checked","name","Overlay","LayerGroup","Circle","pathOptions","fillColor","radius","stroke","FeatureGroup","MapCirclegeo","location","setLocation","setName","Default","prototype","_getIconUrl","mergeOptions","MapGeoJson","mapRef","useEffect","map","leafletElement","parksGeoJson","GeoJSON","nationalParks","onEachFeature","feature","layer","properties","Name","bindPopup","addTo","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1b67f52e.chunk.js","sourcesContent":["import L from 'leaflet';\r\nimport customMarker from 'leaflet/dist/images/marker-icon.png'\r\n\r\nconst iconMarker = new L.Icon({\r\n    iconUrl: customMarker,\r\n    iconRetinaUrl: customMarker,\r\n    iconAnchor: [16, 37],\r\n    popupAnchor: [-5, -20],\r\n    shadowUrl: [16, 37],\r\n    shadowSize: [16, 37],\r\n    shadowAnchor: [16, 37],\r\n    iconSize: new L.Point(25, 37),\r\n});\r\n\r\nexport { iconMarker };","import { Map, TileLayer, Marker, Popup, Tooltip, Rectangle } from 'react-leaflet'\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { iconMarker } from './Icon'\r\n\r\nconst MyMap = () => {\r\n    const rectangle = [\r\n        [-7.744988536639628, 110.4325790735174],\r\n        [-7.74983104913538, 110.43703836008865],\r\n    ]\r\n    return(\r\n        <div className=\"p-4\">\r\n            <h1 className=\"text-red-500 font-bold mb-3 text-3xl\">Learn Map</h1>\r\n            <Map center={[-7.735422, 110.439663]} zoom={14} scrollWheelZoom={true} style={{height: 400}}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                <Marker icon={iconMarker} position={[-7.735422, 110.439663]}>\r\n                    <Popup>\r\n                        <p className=\"text-blue-500 font-bold\">This is My Home</p>\r\n                    </Popup>\r\n                </Marker>\r\n                <Marker icon={iconMarker} position={[-7.750849288857416, 110.43424166136899]}>\r\n                    <Tooltip direction=\"left\">\r\n                        <p className=\"text-red-500 font-bold\">Lampu Merah Stadion</p>\r\n                    </Tooltip>\r\n                </Marker>\r\n                <Rectangle bounds={rectangle} color=\"red\">\r\n                    <Tooltip sticky>sticky Tooltip for Rectangle</Tooltip>\r\n                </Rectangle>\r\n            </Map>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MyMap","import { Map, TileLayer, Marker, Popup, Rectangle, LayersControl, LayerGroup, Circle, FeatureGroup, Tooltip } from 'react-leaflet'\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { iconMarker } from './Icon'\r\nimport React, {useState, useRef, useMemo, useCallback} from 'react';\r\n\r\nconst MapControl = () => {\r\n    const center = [-7.735422, 110.439663]\r\n    const rectangle = [\r\n        [-7.744988536639628, 110.4325790735174],\r\n        [-7.74983104913538, 110.43703836008865],\r\n    ]\r\n    \r\n    function DraggableMarker() {\r\n        const [draggable, setDraggable] = useState(false)\r\n        const [position, setPosition] = useState(center)\r\n        const markerRef = useRef(null)\r\n        const eventHandlers = useMemo(\r\n          () => ({\r\n            dragend() {\r\n              const marker = markerRef.current\r\n              if (marker != null) {\r\n                setPosition(marker.getLatLng())\r\n              }\r\n            },\r\n          }),\r\n          [],\r\n        )\r\n        const toggleDraggable = useCallback(() => {\r\n          setDraggable((d) => !d)\r\n        }, [])\r\n      \r\n        return (\r\n          <Marker\r\n            draggable={draggable}\r\n            eventHandlers={eventHandlers}\r\n            position={position}\r\n            ref={markerRef}\r\n            icon={iconMarker}>\r\n            <Popup minWidth={90}>\r\n              <span onClick={toggleDraggable}>\r\n                {draggable\r\n                  ? `Marker is draggable in position ${position}`\r\n                  : 'Click here to make marker draggable'}\r\n              </span>\r\n            </Popup>\r\n          </Marker>\r\n        )\r\n      }\r\n    return(\r\n        <div className=\"p-4\">\r\n            <h1 className=\"text-green-500 font-bold mb-3 text-3xl\">Learn Map Control</h1>\r\n            <Map center={center} zoom={13} scrollWheelZoom={true} style={{height: 400}}>\r\n                <LayersControl position=\"topright\">\r\n                    <LayersControl.BaseLayer checked name=\"OpenStreetMap.Mapnik\">\r\n                        <TileLayer\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                        />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.BaseLayer name=\"OpenStreetMap.BlackAndWhite\">\r\n                        <TileLayer\r\n                        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                        url=\"https://tiles.wmflabs.org/bw-mapnik/{z}/{x}/{y}.png\"\r\n                        />\r\n                    </LayersControl.BaseLayer>\r\n                    <LayersControl.Overlay name=\"Marker with popup and tooltip\">\r\n                        <LayerGroup>\r\n                            <Marker position={center} icon={iconMarker}>\r\n                                <Popup>\r\n                                    A pretty CSS3 popup. <br /> Easily customizable.\r\n                                </Popup>\r\n                            </Marker>\r\n                            <Marker icon={iconMarker} position={[-7.750849288857416, 110.43424166136899]}>\r\n                                <Tooltip direction=\"left\">\r\n                                    <p className=\"text-red-500 font-bold\">Lampu Merah Stadion</p>\r\n                                </Tooltip>\r\n                            </Marker>\r\n                        </LayerGroup>\r\n                    </LayersControl.Overlay>\r\n                    <LayersControl.Overlay checked name=\"Layer group with circles\">\r\n                        <LayerGroup>\r\n                            <Circle\r\n                                center={center}\r\n                                pathOptions={{ fillColor: 'blue' }}\r\n                                radius={200}\r\n                            />\r\n                            <Circle\r\n                                center={center}\r\n                                pathOptions={{ fillColor: 'red' }}\r\n                                radius={100}\r\n                                stroke={false}\r\n                            />\r\n                            <LayerGroup>\r\n                                <Circle\r\n                                center={[-7.715725929245367, 110.44450562994452]}\r\n                                pathOptions={{ color: 'green', fillColor: 'green' }}\r\n                                radius={100}\r\n                                />\r\n                            </LayerGroup>\r\n                        </LayerGroup>\r\n                    </LayersControl.Overlay>\r\n                    <LayersControl.Overlay name=\"Feature group\">\r\n                        <FeatureGroup pathOptions={{ color: 'purple' }}>\r\n                            <Popup>Popup in FeatureGroup</Popup>\r\n                            <Circle center={[51.51, -0.06]} radius={200} />\r\n                            <Rectangle bounds={rectangle} />\r\n                        </FeatureGroup>\r\n                    </LayersControl.Overlay>\r\n                    <LayersControl.Overlay name=\"Mark with dragable\">\r\n                        <LayerGroup>\r\n                            <DraggableMarker />\r\n                        </LayerGroup>\r\n                    </LayersControl.Overlay>\r\n                </LayersControl>\r\n            </Map>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapControl","import { Map, TileLayer, Marker, Popup } from 'react-leaflet'\r\nimport \"leaflet/dist/leaflet.css\";\r\nimport { iconMarker } from './Icon'\r\n// import L from 'leaflet'\r\nimport { useState } from 'react';\r\nimport Control from 'react-leaflet-control';\r\n\r\nconst MapCirclegeo = () => {\r\n    const [location, setLocation] = useState([-7.735422, 110.439663])\r\n    const [name, setName] = useState('This is my Home')\r\n\r\n    let goHome = () => {\r\n        setLocation([-7.735422, 110.439663])\r\n        setName('This is my Home')\r\n    }\r\n\r\n    let goToCirclegeo = () => {\r\n        setLocation([-6.917087563664246, 107.63797665250873])\r\n        setName('PT Circlegeo')\r\n    }\r\n\r\n    return(\r\n        <div className=\"p-4\">\r\n            <h1 className=\"text-blue-500 font-bold mb-3 text-3xl\">Handle Map with Control Button</h1>\r\n            <Map center={location} zoom={17} scrollWheelZoom={true} style={{height: 400}}>\r\n                <TileLayer\r\n                    attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n                    url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n                />\r\n                 <Marker icon={iconMarker} position={location}>\r\n                    <Popup>\r\n                        <p className=\"text-blue-500 font-bold\">{name}</p>\r\n                    </Popup>\r\n                </Marker>\r\n                <Control position=\"bottomright\" >\r\n                    <button\r\n                        className=\"inline-block mt-3 mr-2 py-2 px-4 font-semibold rounded-lg shadow-md text-white bg-green-500 hover:bg-green-700\"\r\n                        onClick={goHome}\r\n                    >\r\n                    Go Home\r\n                    </button>\r\n                    <button\r\n                        className=\"inline-block mt-3 py-2 px-4 font-semibold rounded-lg shadow-md text-white bg-red-500 hover:bg-red-700\"\r\n                        onClick={ goToCirclegeo }\r\n                    >\r\n                    Go to Circlegeo\r\n                    </button>\r\n                </Control>\r\n            </Map>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapCirclegeo","import React, { useEffect, useRef } from 'react';\r\nimport L from 'leaflet';\r\nimport { Map, TileLayer } from 'react-leaflet';\r\nimport customMarker from 'leaflet/dist/images/marker-icon.png'\r\nimport nationalParks from '../data/national-parks.json'\r\n\r\ndelete L.Icon.Default.prototype._getIconUrl;\r\n\r\nL.Icon.Default.mergeOptions({\r\n    iconRetinaUrl: customMarker,\r\n    iconUrl: customMarker,\r\n    shadowUrl: customMarker\r\n});\r\n  \r\n\r\nconst MapGeoJson = () => {\r\n    const mapRef = useRef()\r\n\r\n    useEffect(() => {\r\n        const { current = {} } = mapRef\r\n        const { leafletElement: map } = current\r\n\r\n        if(!map) return;\r\n\r\n        const parksGeoJson = new L.GeoJSON(nationalParks, {\r\n            onEachFeature: (feature = {}, layer) => {\r\n                const { properties = {} } = feature\r\n                const { Name } = properties\r\n\r\n                if( !Name ) return;\r\n\r\n                layer.bindPopup(`<p>${Name}</p>`)\r\n            }\r\n        })\r\n\r\n        parksGeoJson.addTo(map)\r\n    }, [])\r\n\r\n    return(\r\n        <div className=\"p-4\">\r\n            <h1 className=\"text-dark-500 font-bold mb-3 text-3xl\">Map GeoJson</h1>\r\n            <Map ref={mapRef} center={[39.50, -98.35]} zoom={4} style={{height: 400}}>\r\n                <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" attribution=\"&copy; <a href=&quot;https://www.openstreetmap.org/copyright&quot;>OpenStreetMap</a> contributors\" />\r\n            </Map>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default MapGeoJson","import \"tailwindcss/tailwind.css\"\nimport MyMap from \"./component/MyMap\";\nimport MapControl from \"./component/MapControl\";\nimport MapCirclegeo from \"./component/MapCirclegeo\";\nimport MapGeoJson from \"./component/MapGeoJson\";\n\nfunction App() {\n  return (\n    <div>\n      <MyMap />\n      <MapControl />\n      <MapCirclegeo/>\n      <MapGeoJson/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}